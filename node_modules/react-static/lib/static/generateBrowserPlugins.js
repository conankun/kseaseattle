"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _slash = _interopRequireDefault(require("slash"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _plugins = _interopRequireDefault(require("./plugins"));

//
var _default =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(state) {
    var _state, plugins, config, pluginImports, recurse, pluginsText, pluginImportsText, file, targetPath;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _plugins["default"].beforePrepareBrowserPlugins(state);

          case 2:
            state = _context.sent;
            _state = state, plugins = _state.plugins, config = _state.config; // A deduped list of pluginImports

            pluginImports = [];

            recurse = function recurse(plugins) {
              return (// Return an array of plugins
                "[".concat(plugins.map(function (plugin) {
                  var browserLocation = plugin.browserLocation; // Add the plugin to the list of pluginImports

                  var pluginIndex = browserLocation ? pluginImports.indexOf(browserLocation) : -1;

                  if (pluginIndex === -1 && browserLocation) {
                    pluginImports.push((0, _slash["default"])("__react_static_root__/".concat(_path["default"].relative(config.paths.ROOT, browserLocation))));
                    pluginIndex = pluginImports.length - 1;
                  }

                  var location = plugin.location,
                      plugins = plugin.plugins,
                      options = plugin.options; // IIF to return the final plugin

                  return "{\n        location: \"".concat((0, _slash["default"])("__react_static_root__/".concat(_path["default"].relative(config.paths.ROOT, location))), "\",\n        plugins: ").concat(recurse(plugins || []), ",\n        hooks: ").concat(browserLocation ? "plugin".concat(pluginIndex, "(").concat(JSON.stringify(options), ")") : "{}", "\n      }");
                }).join(',\n'), "]")
              );
            }; // Create the pluginsText


            pluginsText = recurse(plugins || []); // Create the pluginImportsText

            pluginImportsText = pluginImports.map(function (imp, index) {
              return "import plugin".concat(index, " from '").concat(imp, "'");
            }).join('\n'); // Create the file text

            file = "// Imports\n".concat(pluginImportsText, "\n\n// Plugins\nconst plugins = ").concat(pluginsText, "\n\n// Export em!\nexport default plugins");
            targetPath = _path["default"].join(process.env.REACT_STATIC_PLUGINS_PATH);
            _context.next = 12;
            return _fsExtra["default"].remove(targetPath);

          case 12:
            _context.next = 14;
            return _fsExtra["default"].outputFile(targetPath, file);

          case 14:
            return _context.abrupt("return", _plugins["default"].afterPrepareBrowserPlugins(state));

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGF0aWMvZ2VuZXJhdGVCcm93c2VyUGx1Z2lucy5qcyJdLCJuYW1lcyI6WyJzdGF0ZSIsImNvcmVQbHVnaW5zIiwiYmVmb3JlUHJlcGFyZUJyb3dzZXJQbHVnaW5zIiwicGx1Z2lucyIsImNvbmZpZyIsInBsdWdpbkltcG9ydHMiLCJyZWN1cnNlIiwibWFwIiwicGx1Z2luIiwiYnJvd3NlckxvY2F0aW9uIiwicGx1Z2luSW5kZXgiLCJpbmRleE9mIiwicHVzaCIsInBhdGgiLCJyZWxhdGl2ZSIsInBhdGhzIiwiUk9PVCIsImxlbmd0aCIsImxvY2F0aW9uIiwib3B0aW9ucyIsIkpTT04iLCJzdHJpbmdpZnkiLCJqb2luIiwicGx1Z2luc1RleHQiLCJwbHVnaW5JbXBvcnRzVGV4dCIsImltcCIsImluZGV4IiwiZmlsZSIsInRhcmdldFBhdGgiLCJwcm9jZXNzIiwiZW52IiwiUkVBQ1RfU1RBVElDX1BMVUdJTlNfUEFUSCIsImZzIiwicmVtb3ZlIiwib3V0cHV0RmlsZSIsImFmdGVyUHJlcGFyZUJyb3dzZXJQbHVnaW5zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBREE7Ozs7OzsrQkFHZSxpQkFBTUEsS0FBTjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFDQ0Msb0JBQVlDLDJCQUFaLENBQXdDRixLQUF4QyxDQUREOztBQUFBO0FBQ2JBLFlBQUFBLEtBRGE7QUFBQSxxQkFHZUEsS0FIZixFQUdMRyxPQUhLLFVBR0xBLE9BSEssRUFHSUMsTUFISixVQUdJQSxNQUhKLEVBS2I7O0FBQ01DLFlBQUFBLGFBTk8sR0FNUyxFQU5UOztBQVFQQyxZQUFBQSxPQVJPLEdBUUcsU0FBVkEsT0FBVSxDQUFBSCxPQUFPO0FBQUEscUJBQ3JCO0FBRHFCLDJCQUVqQkEsT0FBTyxDQUNSSSxHQURDLENBQ0csVUFBQUMsTUFBTSxFQUFJO0FBQUEsc0JBQ0xDLGVBREssR0FDZUQsTUFEZixDQUNMQyxlQURLLEVBR2I7O0FBQ0Esc0JBQUlDLFdBQVcsR0FBR0QsZUFBZSxHQUM3QkosYUFBYSxDQUFDTSxPQUFkLENBQXNCRixlQUF0QixDQUQ2QixHQUU3QixDQUFDLENBRkw7O0FBR0Esc0JBQUlDLFdBQVcsS0FBSyxDQUFDLENBQWpCLElBQXNCRCxlQUExQixFQUEyQztBQUN6Q0osb0JBQUFBLGFBQWEsQ0FBQ08sSUFBZCxDQUNFLHVEQUMyQkMsaUJBQUtDLFFBQUwsQ0FDdkJWLE1BQU0sQ0FBQ1csS0FBUCxDQUFhQyxJQURVLEVBRXZCUCxlQUZ1QixDQUQzQixFQURGO0FBUUFDLG9CQUFBQSxXQUFXLEdBQUdMLGFBQWEsQ0FBQ1ksTUFBZCxHQUF1QixDQUFyQztBQUNEOztBQWpCWSxzQkFtQkxDLFFBbkJLLEdBbUIwQlYsTUFuQjFCLENBbUJMVSxRQW5CSztBQUFBLHNCQW1CS2YsT0FuQkwsR0FtQjBCSyxNQW5CMUIsQ0FtQktMLE9BbkJMO0FBQUEsc0JBbUJjZ0IsT0FuQmQsR0FtQjBCWCxNQW5CMUIsQ0FtQmNXLE9BbkJkLEVBcUJiOztBQUNBLDBEQUNhLHVEQUNjTixpQkFBS0MsUUFBTCxDQUFjVixNQUFNLENBQUNXLEtBQVAsQ0FBYUMsSUFBM0IsRUFBaUNFLFFBQWpDLENBRGQsRUFEYixtQ0FJV1osT0FBTyxDQUFDSCxPQUFPLElBQUksRUFBWixDQUpsQiwrQkFNRU0sZUFBZSxtQkFDRkMsV0FERSxjQUNhVSxJQUFJLENBQUNDLFNBQUwsQ0FBZUYsT0FBZixDQURiLGFBTmpCO0FBV0QsaUJBbENDLEVBbUNERyxJQW5DQyxDQW1DSSxLQW5DSixDQUZpQjtBQUFBO0FBQUEsYUFSVixFQStDYjs7O0FBQ01DLFlBQUFBLFdBaERPLEdBZ0RPakIsT0FBTyxDQUFDSCxPQUFPLElBQUksRUFBWixDQWhEZCxFQWtEYjs7QUFDTXFCLFlBQUFBLGlCQW5ETyxHQW1EYW5CLGFBQWEsQ0FDcENFLEdBRHVCLENBQ25CLFVBQUNrQixHQUFELEVBQU1DLEtBQU47QUFBQSw0Q0FBZ0NBLEtBQWhDLG9CQUErQ0QsR0FBL0M7QUFBQSxhQURtQixFQUV2QkgsSUFGdUIsQ0FFbEIsSUFGa0IsQ0FuRGIsRUF1RGI7O0FBQ01LLFlBQUFBLElBeERPLHlCQXlEYkgsaUJBekRhLDZDQTRER0QsV0E1REg7QUFpRVBLLFlBQUFBLFVBakVPLEdBaUVNZixpQkFBS1MsSUFBTCxDQUFVTyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMseUJBQXRCLENBakVOO0FBQUE7QUFBQSxtQkFrRVBDLG9CQUFHQyxNQUFILENBQVVMLFVBQVYsQ0FsRU87O0FBQUE7QUFBQTtBQUFBLG1CQW1FUEksb0JBQUdFLFVBQUgsQ0FBY04sVUFBZCxFQUEwQkQsSUFBMUIsQ0FuRU87O0FBQUE7QUFBQSw2Q0FxRU4xQixvQkFBWWtDLDBCQUFaLENBQXVDbkMsS0FBdkMsQ0FyRU07O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgc2xhc2ggZnJvbSAnc2xhc2gnXG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnXG4vL1xuaW1wb3J0IGNvcmVQbHVnaW5zIGZyb20gJy4vcGx1Z2lucydcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgc3RhdGUgPT4ge1xuICBzdGF0ZSA9IGF3YWl0IGNvcmVQbHVnaW5zLmJlZm9yZVByZXBhcmVCcm93c2VyUGx1Z2lucyhzdGF0ZSlcblxuICBjb25zdCB7IHBsdWdpbnMsIGNvbmZpZyB9ID0gc3RhdGVcblxuICAvLyBBIGRlZHVwZWQgbGlzdCBvZiBwbHVnaW5JbXBvcnRzXG4gIGNvbnN0IHBsdWdpbkltcG9ydHMgPSBbXVxuXG4gIGNvbnN0IHJlY3Vyc2UgPSBwbHVnaW5zID0+XG4gICAgLy8gUmV0dXJuIGFuIGFycmF5IG9mIHBsdWdpbnNcbiAgICBgWyR7cGx1Z2luc1xuICAgICAgLm1hcChwbHVnaW4gPT4ge1xuICAgICAgICBjb25zdCB7IGJyb3dzZXJMb2NhdGlvbiB9ID0gcGx1Z2luXG5cbiAgICAgICAgLy8gQWRkIHRoZSBwbHVnaW4gdG8gdGhlIGxpc3Qgb2YgcGx1Z2luSW1wb3J0c1xuICAgICAgICBsZXQgcGx1Z2luSW5kZXggPSBicm93c2VyTG9jYXRpb25cbiAgICAgICAgICA/IHBsdWdpbkltcG9ydHMuaW5kZXhPZihicm93c2VyTG9jYXRpb24pXG4gICAgICAgICAgOiAtMVxuICAgICAgICBpZiAocGx1Z2luSW5kZXggPT09IC0xICYmIGJyb3dzZXJMb2NhdGlvbikge1xuICAgICAgICAgIHBsdWdpbkltcG9ydHMucHVzaChcbiAgICAgICAgICAgIHNsYXNoKFxuICAgICAgICAgICAgICBgX19yZWFjdF9zdGF0aWNfcm9vdF9fLyR7cGF0aC5yZWxhdGl2ZShcbiAgICAgICAgICAgICAgICBjb25maWcucGF0aHMuUk9PVCxcbiAgICAgICAgICAgICAgICBicm93c2VyTG9jYXRpb25cbiAgICAgICAgICAgICAgKX1gXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICAgIHBsdWdpbkluZGV4ID0gcGx1Z2luSW1wb3J0cy5sZW5ndGggLSAxXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IGxvY2F0aW9uLCBwbHVnaW5zLCBvcHRpb25zIH0gPSBwbHVnaW5cblxuICAgICAgICAvLyBJSUYgdG8gcmV0dXJuIHRoZSBmaW5hbCBwbHVnaW5cbiAgICAgICAgcmV0dXJuIGB7XG4gICAgICAgIGxvY2F0aW9uOiBcIiR7c2xhc2goXG4gICAgICAgICAgYF9fcmVhY3Rfc3RhdGljX3Jvb3RfXy8ke3BhdGgucmVsYXRpdmUoY29uZmlnLnBhdGhzLlJPT1QsIGxvY2F0aW9uKX1gXG4gICAgICAgICl9XCIsXG4gICAgICAgIHBsdWdpbnM6ICR7cmVjdXJzZShwbHVnaW5zIHx8IFtdKX0sXG4gICAgICAgIGhvb2tzOiAke1xuICAgICAgICAgIGJyb3dzZXJMb2NhdGlvblxuICAgICAgICAgICAgPyBgcGx1Z2luJHtwbHVnaW5JbmRleH0oJHtKU09OLnN0cmluZ2lmeShvcHRpb25zKX0pYFxuICAgICAgICAgICAgOiBge31gXG4gICAgICAgIH1cbiAgICAgIH1gXG4gICAgICB9KVxuICAgICAgLmpvaW4oJyxcXG4nKX1dYFxuXG4gIC8vIENyZWF0ZSB0aGUgcGx1Z2luc1RleHRcbiAgY29uc3QgcGx1Z2luc1RleHQgPSByZWN1cnNlKHBsdWdpbnMgfHwgW10pXG5cbiAgLy8gQ3JlYXRlIHRoZSBwbHVnaW5JbXBvcnRzVGV4dFxuICBjb25zdCBwbHVnaW5JbXBvcnRzVGV4dCA9IHBsdWdpbkltcG9ydHNcbiAgICAubWFwKChpbXAsIGluZGV4KSA9PiBgaW1wb3J0IHBsdWdpbiR7aW5kZXh9IGZyb20gJyR7aW1wfSdgKVxuICAgIC5qb2luKCdcXG4nKVxuXG4gIC8vIENyZWF0ZSB0aGUgZmlsZSB0ZXh0XG4gIGNvbnN0IGZpbGUgPSBgLy8gSW1wb3J0c1xuJHtwbHVnaW5JbXBvcnRzVGV4dH1cblxuLy8gUGx1Z2luc1xuY29uc3QgcGx1Z2lucyA9ICR7cGx1Z2luc1RleHR9XG5cbi8vIEV4cG9ydCBlbSFcbmV4cG9ydCBkZWZhdWx0IHBsdWdpbnNgXG5cbiAgY29uc3QgdGFyZ2V0UGF0aCA9IHBhdGguam9pbihwcm9jZXNzLmVudi5SRUFDVF9TVEFUSUNfUExVR0lOU19QQVRIKVxuICBhd2FpdCBmcy5yZW1vdmUodGFyZ2V0UGF0aClcbiAgYXdhaXQgZnMub3V0cHV0RmlsZSh0YXJnZXRQYXRoLCBmaWxlKVxuXG4gIHJldHVybiBjb3JlUGx1Z2lucy5hZnRlclByZXBhcmVCcm93c2VyUGx1Z2lucyhzdGF0ZSlcbn1cbiJdfQ==