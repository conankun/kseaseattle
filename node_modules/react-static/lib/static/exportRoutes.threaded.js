"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _require = require('../utils/binHelper'),
    setIgnorePath = _require.setIgnorePath; // eslint-disable-next-line


var path = require('path');

var getConfig = require('./getConfig')["default"];

var _require2 = require('./components/RootComponents'),
    DefaultDocument = _require2.DefaultDocument;

var _require3 = require('../utils'),
    poolAll = _require3.poolAll;

var exportRoute = require('./exportRoute')["default"];

process.on('message',
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(state) {
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            return _context3.delegateYield(
            /*#__PURE__*/
            _regenerator["default"].mark(function _callee2() {
              var _state, routes, Comp, DocumentTemplate, tasks, _loop, i;

              return _regenerator["default"].wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _state = state, routes = _state.routes; // Get config again

                      _context2.next = 3;
                      return getConfig(state);

                    case 3:
                      state = _context2.sent;
                      setIgnorePath(state.config.paths.ARTIFACTS); // Use the node version of the app created with webpack
                      // eslint-disable-next-line

                      Comp = require(path.resolve(state.config.paths.ARTIFACTS, 'static-app.js'))["default"]; // Retrieve the document template

                      DocumentTemplate = state.config.Document || DefaultDocument;
                      tasks = [];

                      _loop = function _loop(i) {
                        var route = routes[i]; // eslint-disable-next-line

                        tasks.push(
                        /*#__PURE__*/
                        (0, _asyncToGenerator2["default"])(
                        /*#__PURE__*/
                        _regenerator["default"].mark(function _callee() {
                          return _regenerator["default"].wrap(function _callee$(_context) {
                            while (1) {
                              switch (_context.prev = _context.next) {
                                case 0:
                                  _context.next = 2;
                                  return exportRoute(_objectSpread({}, state, {
                                    route: route,
                                    Comp: Comp,
                                    DocumentTemplate: DocumentTemplate
                                  }));

                                case 2:
                                  if (process.connected) {
                                    process.send({
                                      type: 'tick'
                                    });
                                  }

                                case 3:
                                case "end":
                                  return _context.stop();
                              }
                            }
                          }, _callee);
                        })));
                      };

                      for (i = 0; i < routes.length; i++) {
                        _loop(i);
                      }

                      _context2.next = 12;
                      return poolAll(tasks, Number(state.config.outputFileRate));

                    case 12:
                      if (process.connected) {
                        process.send({
                          type: 'done'
                        });
                      }

                      process.exit();

                    case 14:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2);
            })(), "t0", 2);

          case 2:
            _context3.next = 9;
            break;

          case 4:
            _context3.prev = 4;
            _context3.t1 = _context3["catch"](0);
            console.error(_context3.t1);

            if (process.connected) {
              process.send({
                type: 'error',
                payload: _context3.t1
              });
            }

            process.exit(1);

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[0, 4]]);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGF0aWMvZXhwb3J0Um91dGVzLnRocmVhZGVkLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJzZXRJZ25vcmVQYXRoIiwicGF0aCIsImdldENvbmZpZyIsIkRlZmF1bHREb2N1bWVudCIsInBvb2xBbGwiLCJleHBvcnRSb3V0ZSIsInByb2Nlc3MiLCJvbiIsInN0YXRlIiwicm91dGVzIiwiY29uZmlnIiwicGF0aHMiLCJBUlRJRkFDVFMiLCJDb21wIiwicmVzb2x2ZSIsIkRvY3VtZW50VGVtcGxhdGUiLCJEb2N1bWVudCIsInRhc2tzIiwiaSIsInJvdXRlIiwicHVzaCIsImNvbm5lY3RlZCIsInNlbmQiLCJ0eXBlIiwibGVuZ3RoIiwiTnVtYmVyIiwib3V0cHV0RmlsZVJhdGUiLCJleGl0IiwiY29uc29sZSIsImVycm9yIiwicGF5bG9hZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7ZUFBMEJBLE9BQU8sQ0FBQyxvQkFBRCxDO0lBQXpCQyxhLFlBQUFBLGEsRUFDUjs7O0FBQ0EsSUFBTUMsSUFBSSxHQUFHRixPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxJQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxhQUFELENBQVAsV0FBbEI7O2dCQUM0QkEsT0FBTyxDQUFDLDZCQUFELEM7SUFBM0JJLGUsYUFBQUEsZTs7Z0JBQ1lKLE9BQU8sQ0FBQyxVQUFELEM7SUFBbkJLLE8sYUFBQUEsTzs7QUFDUixJQUFNQyxXQUFXLEdBQUdOLE9BQU8sQ0FBQyxlQUFELENBQVAsV0FBcEI7O0FBRUFPLE9BQU8sQ0FBQ0MsRUFBUixDQUFXLFNBQVg7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLCtCQUFzQixrQkFBTUMsS0FBTjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLCtCQUVDQSxLQUZELEVBRVZDLE1BRlUsVUFFVkEsTUFGVSxFQUdsQjs7QUFIa0I7QUFBQSw2QkFLSlAsU0FBUyxDQUFDTSxLQUFELENBTEw7O0FBQUE7QUFLbEJBLHNCQUFBQSxLQUxrQjtBQU9sQlIsc0JBQUFBLGFBQWEsQ0FBQ1EsS0FBSyxDQUFDRSxNQUFOLENBQWFDLEtBQWIsQ0FBbUJDLFNBQXBCLENBQWIsQ0FQa0IsQ0FTbEI7QUFDQTs7QUFDTUMsc0JBQUFBLElBWFksR0FXTGQsT0FBTyxDQUFDRSxJQUFJLENBQUNhLE9BQUwsQ0FDbkJOLEtBQUssQ0FBQ0UsTUFBTixDQUFhQyxLQUFiLENBQW1CQyxTQURBLEVBRW5CLGVBRm1CLENBQUQsQ0FBUCxXQVhLLEVBZWxCOztBQUNNRyxzQkFBQUEsZ0JBaEJZLEdBZ0JPUCxLQUFLLENBQUNFLE1BQU4sQ0FBYU0sUUFBYixJQUF5QmIsZUFoQmhDO0FBa0JaYyxzQkFBQUEsS0FsQlksR0FrQkosRUFsQkk7O0FBQUEsNkNBbUJUQyxDQW5CUztBQW9CaEIsNEJBQU1DLEtBQUssR0FBR1YsTUFBTSxDQUFDUyxDQUFELENBQXBCLENBcEJnQixDQXFCaEI7O0FBQ0FELHdCQUFBQSxLQUFLLENBQUNHLElBQU47QUFBQTtBQUFBO0FBQUE7QUFBQSxxREFBVztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx5Q0FDSGYsV0FBVyxtQkFDWkcsS0FEWTtBQUVmVyxvQ0FBQUEsS0FBSyxFQUFMQSxLQUZlO0FBR2ZOLG9DQUFBQSxJQUFJLEVBQUpBLElBSGU7QUFJZkUsb0NBQUFBLGdCQUFnQixFQUFoQkE7QUFKZSxxQ0FEUjs7QUFBQTtBQU9ULHNDQUFJVCxPQUFPLENBQUNlLFNBQVosRUFBdUI7QUFDckJmLG9DQUFBQSxPQUFPLENBQUNnQixJQUFSLENBQWE7QUFBRUMsc0NBQUFBLElBQUksRUFBRTtBQUFSLHFDQUFiO0FBQ0Q7O0FBVFE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEseUJBQVg7QUF0QmdCOztBQW1CbEIsMkJBQVNMLENBQVQsR0FBYSxDQUFiLEVBQWdCQSxDQUFDLEdBQUdULE1BQU0sQ0FBQ2UsTUFBM0IsRUFBbUNOLENBQUMsRUFBcEMsRUFBd0M7QUFBQSw4QkFBL0JBLENBQStCO0FBY3ZDOztBQWpDaUI7QUFBQSw2QkFrQ1pkLE9BQU8sQ0FBQ2EsS0FBRCxFQUFRUSxNQUFNLENBQUNqQixLQUFLLENBQUNFLE1BQU4sQ0FBYWdCLGNBQWQsQ0FBZCxDQWxDSzs7QUFBQTtBQW1DbEIsMEJBQUlwQixPQUFPLENBQUNlLFNBQVosRUFBdUI7QUFDckJmLHdCQUFBQSxPQUFPLENBQUNnQixJQUFSLENBQWE7QUFBRUMsMEJBQUFBLElBQUksRUFBRTtBQUFSLHlCQUFiO0FBQ0Q7O0FBQ0RqQixzQkFBQUEsT0FBTyxDQUFDcUIsSUFBUjs7QUF0Q2tCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUF3Q2xCQyxZQUFBQSxPQUFPLENBQUNDLEtBQVI7O0FBQ0EsZ0JBQUl2QixPQUFPLENBQUNlLFNBQVosRUFBdUI7QUFDckJmLGNBQUFBLE9BQU8sQ0FBQ2dCLElBQVIsQ0FBYTtBQUFFQyxnQkFBQUEsSUFBSSxFQUFFLE9BQVI7QUFBaUJPLGdCQUFBQSxPQUFPO0FBQXhCLGVBQWI7QUFDRDs7QUFDRHhCLFlBQUFBLE9BQU8sQ0FBQ3FCLElBQVIsQ0FBYSxDQUFiOztBQTVDa0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBdEI7O0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IHNldElnbm9yZVBhdGggfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2JpbkhlbHBlcicpXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcbmNvbnN0IGdldENvbmZpZyA9IHJlcXVpcmUoJy4vZ2V0Q29uZmlnJykuZGVmYXVsdFxuY29uc3QgeyBEZWZhdWx0RG9jdW1lbnQgfSA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9Sb290Q29tcG9uZW50cycpXG5jb25zdCB7IHBvb2xBbGwgfSA9IHJlcXVpcmUoJy4uL3V0aWxzJylcbmNvbnN0IGV4cG9ydFJvdXRlID0gcmVxdWlyZSgnLi9leHBvcnRSb3V0ZScpLmRlZmF1bHRcblxucHJvY2Vzcy5vbignbWVzc2FnZScsIGFzeW5jIHN0YXRlID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IHJvdXRlcyB9ID0gc3RhdGVcbiAgICAvLyBHZXQgY29uZmlnIGFnYWluXG5cbiAgICBzdGF0ZSA9IGF3YWl0IGdldENvbmZpZyhzdGF0ZSlcblxuICAgIHNldElnbm9yZVBhdGgoc3RhdGUuY29uZmlnLnBhdGhzLkFSVElGQUNUUylcblxuICAgIC8vIFVzZSB0aGUgbm9kZSB2ZXJzaW9uIG9mIHRoZSBhcHAgY3JlYXRlZCB3aXRoIHdlYnBhY2tcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBjb25zdCBDb21wID0gcmVxdWlyZShwYXRoLnJlc29sdmUoXG4gICAgICBzdGF0ZS5jb25maWcucGF0aHMuQVJUSUZBQ1RTLFxuICAgICAgJ3N0YXRpYy1hcHAuanMnXG4gICAgKSkuZGVmYXVsdFxuICAgIC8vIFJldHJpZXZlIHRoZSBkb2N1bWVudCB0ZW1wbGF0ZVxuICAgIGNvbnN0IERvY3VtZW50VGVtcGxhdGUgPSBzdGF0ZS5jb25maWcuRG9jdW1lbnQgfHwgRGVmYXVsdERvY3VtZW50XG5cbiAgICBjb25zdCB0YXNrcyA9IFtdXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHJvdXRlID0gcm91dGVzW2ldXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIHRhc2tzLnB1c2goYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBleHBvcnRSb3V0ZSh7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgcm91dGUsXG4gICAgICAgICAgQ29tcCxcbiAgICAgICAgICBEb2N1bWVudFRlbXBsYXRlLFxuICAgICAgICB9KVxuICAgICAgICBpZiAocHJvY2Vzcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICBwcm9jZXNzLnNlbmQoeyB0eXBlOiAndGljaycgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgYXdhaXQgcG9vbEFsbCh0YXNrcywgTnVtYmVyKHN0YXRlLmNvbmZpZy5vdXRwdXRGaWxlUmF0ZSkpXG4gICAgaWYgKHByb2Nlc3MuY29ubmVjdGVkKSB7XG4gICAgICBwcm9jZXNzLnNlbmQoeyB0eXBlOiAnZG9uZScgfSlcbiAgICB9XG4gICAgcHJvY2Vzcy5leGl0KClcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpXG4gICAgaWYgKHByb2Nlc3MuY29ubmVjdGVkKSB7XG4gICAgICBwcm9jZXNzLnNlbmQoeyB0eXBlOiAnZXJyb3InLCBwYXlsb2FkOiBlcnIgfSlcbiAgICB9XG4gICAgcHJvY2Vzcy5leGl0KDEpXG4gIH1cbn0pXG4iXX0=