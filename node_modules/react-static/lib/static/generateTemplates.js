"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _chunkBuilder = require("../utils/chunkBuilder");

var _default =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(state) {
    var paths, templates, file, dynamicRoutesPath;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            paths = state.config.paths, templates = state.templates;
            file = "\n".concat(process.env.NODE_ENV === 'production' ? "\nimport React from 'react'\nimport universal, { setHasBabelPlugin } from 'react-universal-component'\n\nsetHasBabelPlugin()\n\nconst universalOptions = {\n  loading: () => null,\n  error: props => {\n    console.error(props.error);\n    return <div>An error occurred loading this page's template. More information is available in the console.</div>;\n  },\n  ignoreBabelRename: true\n}\n\n".concat(templates.map(function (template, index) {
              var chunkName = ''; // relative resolving produces the wrong path, a "../" is missing
              // as the files looks equal, we simple use an absolute path then

              if (!paths.DIST.startsWith(paths.ROOT)) {
                chunkName = "/* webpackChunkName: \"".concat((0, _chunkBuilder.chunkNameFromFile)(template), "\" */");
              }

              return "const t_".concat(index, " = universal(import('").concat(template, "'").concat(chunkName, "), universalOptions)\n      t_").concat(index, ".template = '").concat(template, "'\n      ");
            }).join('\n'), "\n\n// Template Map\nexport default {\n  ").concat(templates.map(function (template, index) {
              return "'".concat(template, "': t_").concat(index);
            }).join(',\n'), "\n}\n// Not Found Template\nexport const notFoundTemplate = ").concat(JSON.stringify(templates[0]), "\n") : "\n\n// Template Map\nexport default {\n  ".concat(templates.map(function (template) {
              return "'".concat(template, "': require('").concat(template, "').default");
            }).join(',\n'), "\n}\n\nexport const notFoundTemplate = '").concat(templates[0], "'\n"), "\n");
            dynamicRoutesPath = _path["default"].join(process.env.REACT_STATIC_TEMPLATES_PATH);
            _context.next = 5;
            return _fsExtra["default"].remove(dynamicRoutesPath);

          case 5:
            _context.next = 7;
            return _fsExtra["default"].outputFile(dynamicRoutesPath, file);

          case 7:
            return _context.abrupt("return", state);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGF0aWMvZ2VuZXJhdGVUZW1wbGF0ZXMuanMiXSwibmFtZXMiOlsic3RhdGUiLCJwYXRocyIsImNvbmZpZyIsInRlbXBsYXRlcyIsImZpbGUiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJtYXAiLCJ0ZW1wbGF0ZSIsImluZGV4IiwiY2h1bmtOYW1lIiwiRElTVCIsInN0YXJ0c1dpdGgiLCJST09UIiwiam9pbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJkeW5hbWljUm91dGVzUGF0aCIsInBhdGgiLCJSRUFDVF9TVEFUSUNfVEVNUExBVEVTX1BBVEgiLCJmcyIsInJlbW92ZSIsIm91dHB1dEZpbGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7Ozs7OzsrQkFFZSxpQkFBTUEsS0FBTjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFREMsWUFBQUEsS0FGQyxHQUlURCxLQUpTLENBRVhFLE1BRlcsQ0FFREQsS0FGQyxFQUdYRSxTQUhXLEdBSVRILEtBSlMsQ0FHWEcsU0FIVztBQU1QQyxZQUFBQSxJQU5PLGVBUWJDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQXpCLG1aQWdCQUosU0FBUyxDQUNSSyxHQURELENBQ0ssVUFBQ0MsUUFBRCxFQUFXQyxLQUFYLEVBQXFCO0FBQ3hCLGtCQUFJQyxTQUFTLEdBQUcsRUFBaEIsQ0FEd0IsQ0FHeEI7QUFDQTs7QUFFQSxrQkFBSSxDQUFDVixLQUFLLENBQUNXLElBQU4sQ0FBV0MsVUFBWCxDQUFzQlosS0FBSyxDQUFDYSxJQUE1QixDQUFMLEVBQXdDO0FBQ3RDSCxnQkFBQUEsU0FBUyxvQ0FBNEIscUNBQWtCRixRQUFsQixDQUE1QixVQUFUO0FBQ0Q7O0FBRUQsdUNBQWtCQyxLQUFsQixrQ0FBK0NELFFBQS9DLGNBQTJERSxTQUEzRCwyQ0FDTUQsS0FETiwwQkFDMkJELFFBRDNCO0FBR0QsYUFkRCxFQWVDTSxJQWZELENBZU0sSUFmTixDQWhCQSxzREFtQ0VaLFNBQVMsQ0FBQ0ssR0FBVixDQUFjLFVBQUNDLFFBQUQsRUFBV0MsS0FBWDtBQUFBLGdDQUF5QkQsUUFBekIsa0JBQXlDQyxLQUF6QztBQUFBLGFBQWQsRUFBZ0VLLElBQWhFLENBQXFFLEtBQXJFLENBbkNGLHlFQXNDZ0NDLElBQUksQ0FBQ0MsU0FBTCxDQUFlZCxTQUFTLENBQUMsQ0FBRCxDQUF4QixDQXRDaEMsNkRBNENFQSxTQUFTLENBQ1JLLEdBREQsQ0FDSyxVQUFBQyxRQUFRO0FBQUEsZ0NBQVFBLFFBQVIseUJBQStCQSxRQUEvQjtBQUFBLGFBRGIsRUFFQ00sSUFGRCxDQUVNLEtBRk4sQ0E1Q0YscURBaURpQ1osU0FBUyxDQUFDLENBQUQsQ0FqRDFDLFFBUmE7QUE4RFBlLFlBQUFBLGlCQTlETyxHQThEYUMsaUJBQUtKLElBQUwsQ0FBVVYsT0FBTyxDQUFDQyxHQUFSLENBQVljLDJCQUF0QixDQTlEYjtBQUFBO0FBQUEsbUJBK0RQQyxvQkFBR0MsTUFBSCxDQUFVSixpQkFBVixDQS9ETzs7QUFBQTtBQUFBO0FBQUEsbUJBZ0VQRyxvQkFBR0UsVUFBSCxDQUFjTCxpQkFBZCxFQUFpQ2QsSUFBakMsQ0FoRU87O0FBQUE7QUFBQSw2Q0FzRU5KLEtBdEVNOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJ1xuaW1wb3J0IHsgY2h1bmtOYW1lRnJvbUZpbGUgfSBmcm9tICcuLi91dGlscy9jaHVua0J1aWxkZXInXG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIHN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbmZpZzogeyBwYXRocyB9LFxuICAgIHRlbXBsYXRlcyxcbiAgfSA9IHN0YXRlXG5cbiAgY29uc3QgZmlsZSA9IGBcbiR7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbidcbiAgICA/IGBcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB1bml2ZXJzYWwsIHsgc2V0SGFzQmFiZWxQbHVnaW4gfSBmcm9tICdyZWFjdC11bml2ZXJzYWwtY29tcG9uZW50J1xuXG5zZXRIYXNCYWJlbFBsdWdpbigpXG5cbmNvbnN0IHVuaXZlcnNhbE9wdGlvbnMgPSB7XG4gIGxvYWRpbmc6ICgpID0+IG51bGwsXG4gIGVycm9yOiBwcm9wcyA9PiB7XG4gICAgY29uc29sZS5lcnJvcihwcm9wcy5lcnJvcik7XG4gICAgcmV0dXJuIDxkaXY+QW4gZXJyb3Igb2NjdXJyZWQgbG9hZGluZyB0aGlzIHBhZ2UncyB0ZW1wbGF0ZS4gTW9yZSBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGNvbnNvbGUuPC9kaXY+O1xuICB9LFxuICBpZ25vcmVCYWJlbFJlbmFtZTogdHJ1ZVxufVxuXG4ke3RlbXBsYXRlc1xuICAubWFwKCh0ZW1wbGF0ZSwgaW5kZXgpID0+IHtcbiAgICBsZXQgY2h1bmtOYW1lID0gJydcblxuICAgIC8vIHJlbGF0aXZlIHJlc29sdmluZyBwcm9kdWNlcyB0aGUgd3JvbmcgcGF0aCwgYSBcIi4uL1wiIGlzIG1pc3NpbmdcbiAgICAvLyBhcyB0aGUgZmlsZXMgbG9va3MgZXF1YWwsIHdlIHNpbXBsZSB1c2UgYW4gYWJzb2x1dGUgcGF0aCB0aGVuXG5cbiAgICBpZiAoIXBhdGhzLkRJU1Quc3RhcnRzV2l0aChwYXRocy5ST09UKSkge1xuICAgICAgY2h1bmtOYW1lID0gYC8qIHdlYnBhY2tDaHVua05hbWU6IFwiJHtjaHVua05hbWVGcm9tRmlsZSh0ZW1wbGF0ZSl9XCIgKi9gXG4gICAgfVxuXG4gICAgcmV0dXJuIGBjb25zdCB0XyR7aW5kZXh9ID0gdW5pdmVyc2FsKGltcG9ydCgnJHt0ZW1wbGF0ZX0nJHtjaHVua05hbWV9KSwgdW5pdmVyc2FsT3B0aW9ucylcbiAgICAgIHRfJHtpbmRleH0udGVtcGxhdGUgPSAnJHt0ZW1wbGF0ZX0nXG4gICAgICBgXG4gIH0pXG4gIC5qb2luKCdcXG4nKX1cblxuLy8gVGVtcGxhdGUgTWFwXG5leHBvcnQgZGVmYXVsdCB7XG4gICR7dGVtcGxhdGVzLm1hcCgodGVtcGxhdGUsIGluZGV4KSA9PiBgJyR7dGVtcGxhdGV9JzogdF8ke2luZGV4fWApLmpvaW4oJyxcXG4nKX1cbn1cbi8vIE5vdCBGb3VuZCBUZW1wbGF0ZVxuZXhwb3J0IGNvbnN0IG5vdEZvdW5kVGVtcGxhdGUgPSAke0pTT04uc3RyaW5naWZ5KHRlbXBsYXRlc1swXSl9XG5gXG4gICAgOiBgXG5cbi8vIFRlbXBsYXRlIE1hcFxuZXhwb3J0IGRlZmF1bHQge1xuICAke3RlbXBsYXRlc1xuICAgIC5tYXAodGVtcGxhdGUgPT4gYCcke3RlbXBsYXRlfSc6IHJlcXVpcmUoJyR7dGVtcGxhdGV9JykuZGVmYXVsdGApXG4gICAgLmpvaW4oJyxcXG4nKX1cbn1cblxuZXhwb3J0IGNvbnN0IG5vdEZvdW5kVGVtcGxhdGUgPSAnJHt0ZW1wbGF0ZXNbMF19J1xuYFxufVxuYFxuXG4gIGNvbnN0IGR5bmFtaWNSb3V0ZXNQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuZW52LlJFQUNUX1NUQVRJQ19URU1QTEFURVNfUEFUSClcbiAgYXdhaXQgZnMucmVtb3ZlKGR5bmFtaWNSb3V0ZXNQYXRoKVxuICBhd2FpdCBmcy5vdXRwdXRGaWxlKGR5bmFtaWNSb3V0ZXNQYXRoLCBmaWxlKVxuXG4gIC8vIFdlIGhhdmUgdG8gd2FpdCBoZXJlIGZvciBhIHNtaWRnZSwgYmVjYXVzZSB3ZWJwYWNrIHdhdGNoZXIgaXNcbiAgLy8gb3Zlcmx5IGFnZ3Jlc3NpdmUgb24gZmlyc3Qgc3RhcnRcbiAgLy8gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwMCkpXG5cbiAgcmV0dXJuIHN0YXRlXG59XG4iXX0=